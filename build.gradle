/*
 * Copyright (c) 2020 Informatics Matters Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.5'
    }
}

description = 'Fragment Network tools and services'

allprojects {

    // The version is not used if  is set.
    // The version is then only used if it's not a snapshot.
    // If it's a snapshot images are tagged 'latest'
    version = '0.3.3-SNAPSHOT'

    group = 'org.squonk.fragnet'

    apply plugin: 'java'

    sourceCompatibility = 1.8

    project.ext.set('camelVersion', '2.24.2')
    // look at the jackson2-version property here (with correct tag) to get the right Jackson version
    // https://github.com/apache/camel/blob/master/parent/pom.xml
    project.ext.set('jacksonVersion', '2.10.0')
    project.ext.set('groovyVersion', '2.5.9')
    project.ext.set('weldVersion', '3.0.5.Final')

    // Define the tag label for docker images.
    // If FRAGNET_IMAGE_TAG is set then it is used,
    // otherwise it's either 'latest'
    // or the value of our 'version' property.
    def dockerImageTag = System.getenv('FRAGNET_IMAGE_TAG')
    if (dockerImageTag == null || dockerImageTag.length() == 0) {
        // As we're here FRAGNET_IMAGE_TAG is not set.
        // the version number is 'latest' if a snapshot
        // otherwise it's the version.
        if (!version.endsWith('-SNAPSHOT')) {
            project.ext.set('dockerImageTag', version)
        } else {
            project.ext.set('dockerImageTag', 'latest')
        }
    }


    // In this section you declare where to find the dependencies of your project
    repositories {
        jcenter()
    }

    // In this section you declare the dependencies for your production and test code
    dependencies {
        implementation 'org.slf4j:slf4j-jdk14:1.7.25'

        // Spock for unit testing
        testImplementation "org.codehaus.groovy:groovy-all:$groovyVersion"
        testImplementation "org.spockframework:spock-core:1.2-groovy-2.5"
    }

}

project.ext.set('dockerHost', getDockerHost())
project.ext.set('dockerCertPath', System.env.DOCKER_CERT_PATH ? file(System.env.DOCKER_CERT_PATH) : null)

String getDockerHost() {
    String h = System.getenv('DOCKER_HOST') ?: 'unix:///var/run/docker.sock'
    return h
}

wrapper {
    gradleVersion = '7.4.1'
}

task buildImages {
    dependsOn = [
            'cdk-depict:dockerBuildImage',
            'fragnet-search:buildDockerImage',
            'fragnet-depict:buildDockerImage'
    ]
}