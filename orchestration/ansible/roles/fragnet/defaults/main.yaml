---

# AWS variables...
# ---

# The user is expected to have defined AWS credentials on the control machine
# (the machine the playbook is run on, not the host being modified)
# and other AWS-specific environment variables, namely: -
#
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY
# - AWS_DEFAULT_REGION
#
# We read them here to ensure that the playbook does not progress
# unless the user has been explict about the region (especially).

aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
aws_region: "{{ lookup('env', 'AWS_DEFAULT_REGION') | default('eu-west-1', true) }}"

# The Fragnet bucket (where the graph data is located)
s3_fragnet_bucket: im-fragnet

# Graph (neo4j) variables...
# -----

# The default (neo4j) password
graph_password: "{{ lookup('env', 'NEO4J_PASSWORD') }}"
# The import/loader script
graph_loader_script: load-neo4j.sh
# The InformaticsMatters Graph container image and version
graph_image: informaticsmatters/neo4j
graph_version: 3.5
# Do we wait for the graph DB before continuing?
wait_for_graph: no
# And the time to wait for the database?
# Here, this is the time for the neo47 port (7474) to become available.
# On first deployment this can be significant, on subsequent
# restarts it's usually fast (less than a minute).
# A period of 360 minutes is 6 hours.
minutes_to_wait_for_graph: 360
# The container restart policy for the Graph database...
graph_restart_policy: always
# Synchronise the S3 graph data files?
# If set graph import files will be synchronised with those on S3
synchronise_origin: yes
# Set to clear the database.
# Used during initial deployment to remove the graph database directory.
clear_graph: yes
# Heap (min and max G)
graph_heap_g: 8
# The user is required to define the graph page cache size,
# the value used here will result in an error.
graph_pagecache_size_g: SetMe

# Fragnet application variables...
# -------

# The Docker image tag for the 'squonk/fragnet-search' image.
fragnet_tag: latest
# The port to expose the Fragnet service on.
# Internally the port is expected to be on 8080,
# this is the port Fragnet is mapped to on the host.
fragnet_port: 8080
# Fragnet API version
franget_api: v2
# A username and password (generally for tests)
fragnet_username: "{{ lookup('env', 'FRAGNET_USERNAME') }}"
fragnet_password: "{{ lookup('env', 'FRAGNET_PASSWORD') }}"
# The container restart policy for the Fragnet server...
fragnet_restart_policy: always
# Display result details?
fragnet_debug: yes
# Query timeout (used in the test-fragnet play)
fragnet_query_timeout_s: 180

# Keycloak variables...
# --------

# Keycloak material that's expected by the
# 'keycloak.json' file mounted in the fragnet-search container.
# This dynamic/sensitive material is expected to be made available
# as environment variables. See the orchestration/setenv-template file.
keycloak_server_url: "{{ lookup('env', 'KEYCLOAK_SERVER_URL') }}"
keycloak_public_key: "{{ lookup('env', 'KEYCLOAK_PUBLIC_KEY') }}"
keycloak_secret: "{{ lookup('env', 'KEYCLOAK_SECRET') }}"
