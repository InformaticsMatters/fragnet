---

# Install and configure certbot (via an existing Galaxy Role)

# The main aim of this assert block is to ensure that the
# user has provided a vault password, typically via
# the argument "--vault-password-file ../vault-pass.txt"

- name: Assert key variables
  assert:
    that:
    - fragent_search_domain_certbot_email|length > 0
    - fragent_search_domain_certbot_email != 'SetMe'
    - fragent_search_pfx_password|length > 0
    - fragent_search_pfx_password != 'SetMe'

# We *MUST* install the epel release *BEFORE* (i.e. separately from) certbot.
# If not certbot can't be found!

- name: Install packages (epel-release)
  yum:
    name:
    - epel-release
    lock_timeout: 240
  become: yes

- name: Install packages (other)
  yum:
    name:
    - openssl
    - certbot
    lock_timeout: 240
  become: yes

# Install geerlingguy's role (optional)
# in order to generate certificates...
# If we don't do this then we must ensure that certificate files
# exist in order to satisfy the subsequent PFX task.
# i.e. we need: -
#
# 1.    /etc/letsencrypt/live/{{ fragnet_search_domain }}/cert.pem
# 2.    /etc/letsencrypt/live/{{ fragnet_search_domain }}/chain.pem
# 3.    /etc/letsencrypt/live/{{ fragnet_search_domain }}/privkey.pem

- name: Install certbot role
  import_role:
    name: geerlingguy.certbot
  vars:
    certbot_auto_renew: "{{ fragnet_search_certificate_auto_renew|bool }}"
    certbot_auto_renew_hour: "{{ fragnet_search_renew_hour }}"
    certbot_auto_renew_minute: "{{ fragnet_search_renew_minute }}"
    certbot_create_if_missing: true
    certbot_admin_email: "{{ fragent_search_domain_certbot_email }}"
    certbot_create_standalone_stop_services: []
    certbot_certs:
    - domains:
      - "{{ fragnet_search_domain }}"
  become: yes
  when: fragnet_search_use_geerlingguy_role|bool

# Create a pkcs12 cryptography file (.pfx)
# in the user's $HOME/fragnet directory.

- name: Ensure PFX destination directory
  file:
    path: "{{ ansible_env.HOME }}/fragnet"
    state: directory

- name: Create PFX file (pkcs12)
  command: >-
    openssl pkcs12 -export -out {{ ansible_env.HOME }}/fragnet/bundle.pfx
    -inkey privkey.pem
    -in cert.pem
    -certfile chain.pem
    -passout pass:{{ fragent_search_pfx_password }}
  args:
    chdir: /etc/letsencrypt/live/{{ fragnet_search_domain }}
  become: yes
