---

# Has the user defined suitable variables needed to run these tasks?

- name: Assert Fragnet variables
  fail:
    msg: You must define a FRAGNET_USERNAME and FRAGNET_PASSWORD
  when: fragnet_username == '' or fragnet_password == ''

# A series of tasks to test the Fragnet service.
# This relies on a suitable username and password that can be used
# to obtain a Fragnet API access token.
#
# In this simple example we...
#
# - Get a token from the Fragnet server
# - Run an example search
# - Echo the size of the search results (nodes, edges, groups)
# - Check the search result (just the count of nodes, edges, groups)
#
# Refer to the **Example REST interaction** section of the
# `orchestration/README.md`, which is the source of the original
# cURL command sequence for the example being automatically tested here.

- name: Construct query
  set_fact:
    fragnet_query: "http://{{ api }}/{{ method }}/{{ smiles|urlencode }}?\
                                      hac={{ hac }}&\
                                      rac={{ rac }}&\
                                      hops={{ hops }}&\
                                      calcs={{ calcs }}"
  vars:
    api: "{{ ansible_host }}:8080/fragnet-search/rest/v1"
    method: search/neighbourhood
    smiles: c1ccc(Nc2nc3ccccc3o2)cc1
    hac: 3
    rac: 1
    hops: 2
    calcs: LOGP,SIM_RDKIT_TANIMOTO

- name: Display query
  debug:
    var: fragnet_query
  when: fragnet_debug|bool

# To get an API token we POST to Squonk
# and pass in a number of 'parameters'.
#
# As the 'body' format is 'form-urlencoded'
# the following will automatically add the header
# "Content-Type: application/x-www-form-urlencoded"

- name: Get an API token
  uri:
    url: https://squonk.it/auth/realms/squonk/protocol/openid-connect/token
    body:
      grant_type: password
      client_id: fragnet-search
      username: "{{ fragnet_username }}"
      password: "{{ fragnet_password }}"
    body_format: form-urlencoded
    method: POST
  register: fragnet_result

- name: Display API username
  debug:
    var: fragnet_username
  when: fragnet_debug|bool

- name: Display API token
  debug:
    var: fragnet_result.json.access_token
  when: fragnet_debug|bool

- name: Run query
  uri:
    url: "{{ fragnet_query }}"
    headers:
      Authorization: bearer {{ fragnet_result.json.access_token }}
  register: search_result

- name: Assert sane search result
  assert:
    that:
      - search_result.json.edges is defined
      - search_result.json.nodes is defined
      - search_result.json.groups is defined

- name: Check search results
  assert:
    that:
      - search_result.json.edges|length == 251
      - search_result.json.nodes|length == 238
      - search_result.json.groups|length == 23

- name: Echo search result lengths
  debug:
    msg: >-
      edges={{ search_result.json.edges|length }}
      nodes={{ search_result.json.nodes|length }}
      groups={{ search_result.json.groups|length }}

- name: Get node SMILES and compound IDs that are available for procurement
  set_fact:
    compounds: "{{ search_result.json|json_query(query) }}"
  vars:
    query: "nodes[?molType=='NET_MOL'].{smiles: smiles, cmpd_id: props.cmpd_id}"

- name: Display compounds
  debug:
    var: compounds
  when: fragnet_debug|bool

- name: Display number of compounds
  debug:
    msg: compounds={{ compounds|length }}

- name: Assert compound count
  assert:
    that: compounds|length == 225
