---

# Has the user defined suitable variables needed to run these tasks?

- name: Assert Fragnet variables
  fail:
    msg: You must define a FRAGNET_USERNAME and FRAGNET_PASSWORD
  when: fragnet_username == '' or fragnet_password == ''

- name: Ping the search engine
  uri:
    url: https://{{ fragnet_search_domain }}/fragnet-search/rest/ping

# A series of tasks to test the Fragnet service.
# This relies on a suitable username and password that can be used
# to obtain a Fragnet API access token.

# To get an API token we POST to Squonk
# and pass in a number of 'parameters'.
#
# As the 'body' format is 'form-urlencoded'
# the following will automatically add the header
# "Content-Type: application/x-www-form-urlencoded"

- name: Get an API token
  uri:
    url: https://squonk.it/auth/realms/squonk/protocol/openid-connect/token
    body:
      grant_type: password
      client_id: fragnet-search
      username: "{{ fragnet_username }}"
      password: "{{ fragnet_password }}"
    body_format: form-urlencoded
    method: POST
  register: fragnet_result

- name: Display API username
  debug:
    var: fragnet_username
  when: fragnet_debug|bool

- name: Display API token
  debug:
    var: fragnet_result.json.access_token
  when: fragnet_debug|bool

# Test the search/suppliers query

- name: Run search/suppliers query
  uri:
    url: https://{{ api }}/{{ method }}
    headers:
      Authorization: bearer {{ fragnet_result.json.access_token }}
    timeout: "{{ fragnet_query_timeout_s|int }}"
  vars:
    api: "{{ fragnet_search_domain }}/fragnet-search/rest/{{ fragnet_api }}"
    method: search/suppliers
  register: suppliers_result

- name: Collect suppliers
  set_fact:
    suppliers_in_db: "{{ suppliers_result|json_query('json[*].name')|flatten }}"

- name: Display suppliers
  debug:
    var: suppliers_in_db

- name: Check suppliers
  assert:
    that: suppliers_in_db|length > 0

# Test the search/neighbourhood query (using the first supplier)

- name: Construct search/neighbourhood query ({{ suppliers_in_db[0] }})
  set_fact:
    uri_string: "https://{{ api }}/{{ path }}/{{ smiles|urlencode }}?\
                 {{ hac }}&{{ rac }}&{{ hops }}&{{ calcs }}&{{ suppliers }}"
  vars:
    api: "{{ fragnet_search_domain }}/fragnet-search/rest/{{ fragnet_api }}"
    path: search/neighbourhood
    smiles: c1ccc(Nc2nc3ccccc3o2)cc1
    hac: hac=3
    rac: rac=1
    hops: hops=2
    calcs: calcs=LOGP
    suppliers: suppliers={{ suppliers_in_db[0] }}

- name: Display query
  debug:
    var: uri_string

- name: Run query
  uri:
    url: "{{ uri_string }}"
    headers:
      Authorization: bearer {{ fragnet_result.json.access_token }}
    timeout: "{{ fragnet_query_timeout_s|int }}"
  register: search_result

- name: Check we have some nodes, edges and groups
  assert:
    that:
    - search_result.json.nodes is defined
    - search_result.json.edges is defined
    - search_result.json.groups is defined

- name: Echo search result lengths
  debug:
    msg: >-
      edges={{ search_result.json.edges|length }}
      nodes={{ search_result.json.nodes|length }}
      groups={{ search_result.json.groups|length }}

- name: Echo search result group keys (classification=='ADDITION')
  debug:
    var: search_result|json_query(query)
  vars:
    query: "json.groups[?classification=='ADDITION'].key"
