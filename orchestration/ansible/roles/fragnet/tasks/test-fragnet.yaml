---

# Has the user defined suitable variables needed to run these tasks?

- name: Assert Fragnet variables
  fail:
    msg: You must define a FRAGNET_USERNAME and FRAGNET_PASSWORD
  when: fragnet_username == '' or fragnet_password == ''

# First of all ... a basic test to check the engine's alive
# by calling the REST 'ping' endpoint

- name: Ping the search engine
  uri:
    url: https://{{ fragnet_search_domain }}/fragnet-search/rest/ping

# For more complex tests we'll need an API token.
#
# To get an API token we POST to Squonk and pass in a number of 'parameters'
# via the body. As the 'body' format is 'form-urlencoded' the following will
# automatically add the header the required header: -
# "Content-Type: application/x-www-form-urlencoded"
#
# Fro the sake of these tests, and the ones that follow, we assume
# that the token lifespan is sufficient so it won't expire
# before the tests have finished.

- name: Display API username
  debug:
    var: fragnet_username
  when: fragnet_debug|bool

- name: Get API token
  uri:
    url: https://squonk.it/auth/realms/squonk/protocol/openid-connect/token
    body:
      grant_type: password
      client_id: fragnet-search
      username: "{{ fragnet_username }}"
      password: "{{ fragnet_password }}"
    body_format: form-urlencoded
    method: POST
  register: fragnet_result

- name: Set token
  set_fact:
    fragnet_token: "{{ fragnet_result.json.access_token }}"

- name: Display API token
  debug:
    var: fragnet_token
  when: fragnet_debug|bool

# Now get the list of suppliers in the deployed database.
# This becomes a 'suppliers_in_db' fact (a list)
# that we reply on in other tests...

- name: Run suppliers query
  uri:
    url: https://{{ api }}/search/suppliers
    headers:
      Authorization: bearer {{ fragnet_token }}
    timeout: "{{ fragnet_query_timeout_s|int }}"
  vars:
    api: "{{ fragnet_search_domain }}/fragnet-search/rest/{{ fragnet_api }}"
  register: suppliers_result

- name: Collect result's suppliers (sorted)
  set_fact:
    fragnet_db_suppliers: "{{ suppliers_result|json_query('json[*].name')|flatten|sort }}"

- name: Display suppliers
  debug:
    var: fragnet_db_suppliers

# A simply sanity check before going any further...

- name: Make sure there's at leat one supplier
  assert:
    that: fragnet_db_suppliers|length > 0

# Now ...
# Load graph-specific test variables

- name: Load graph-specific availability test variables
  include_vars: "{{ lookup('first_found', possible_files) }}"
  vars:
    possible_files:
    - roles/fragnet/vars/test_{{ graph_name }}.yaml
    - roles/fragnet/vars/test_default.yaml

# If the user's defined an expected set of suppliers, then
# it, and the fragnet_db_suppliers must match.
# We fist compare the size fo the lists and then their (sorted) content.

- name: Check supplier count
  assert:
    that: fragnet_expected_suppliers|length == fragnet_db_suppliers|length
  when: fragnet_expected_suppliers|length > 0

- name: Display expected suppliers
  debug:
    var: fragnet_expected_suppliers

- name: Display actual suppliers
  debug:
    var: fragnet_db_suppliers

- name: Check supplier content
  assert:
    that: fragnet_expected_suppliers|sort == fragnet_db_suppliers
  when: fragnet_expected_suppliers|length > 0

# Now, include more detailed tests
# - that rely on the 'fragnet_token' and 'fragnet_db_suppliers' list.

- name: Run Fragnet availability tests
  include_tasks: test-fragnet-availability.yaml
  vars:
    molecule: "{{ item }}"
  loop: "{{ availability_tests }}"
