/*
 * Copyright (c) 2020 Informatics Matters Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
    id 'com.bmuschko.docker-remote-api'
}

description = 'Fragment network search'

String RDBASE = System.getenv('RDBASE') ?: ''
String RDKitJarFile = RDBASE + '/Code/JavaWrappers/gmwrapper/org.RDKit.jar'
boolean RDKitJava = RDBASE && file(RDKitJarFile).exists()
println "jar $RDKitJarFile exists? $RDKitJava"

apply plugin: 'war'
apply plugin: 'groovy'
apply plugin: 'com.bmuschko.tomcat'


dependencies {

    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

    compile "org.jboss.weld.servlet:weld-servlet-core:$weldVersion"
    
    compile "org.apache.camel:camel-core:$camelVersion"
    compile "org.apache.camel:camel-jackson:$camelVersion"
    compile "org.apache.camel:camel-servlet:$camelVersion"
    compile "org.apache.camel:camel-servletlistener:$camelVersion"
    compile "org.apache.camel:camel-cdi:$camelVersion"
    compile "org.apache.camel:camel-swagger:$camelVersion"
    compile "org.apache.camel:camel-swagger-java:$camelVersion"

    implementation "io.prometheus:simpleclient_common:0.6.0"

    if (RDKitJava) {
        println "RDBASE defined as $RDBASE - using that location for RDKit"
        println "Using jar file " + RDKitJarFile
        compile files(RDKitJarFile)
    } else {
        println "Using local org.RDKit.jar"
        compile files("../lib/rdkit/org.RDKit.jar")
    }

    compile 'org.neo4j.driver:neo4j-java-driver:1.7.2'
    
    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

    def tomcatVersion = '8.5.37'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"


    testCompile "org.codehaus.groovy:groovy-all:2.5.7"
    testCompile "org.spockframework:spock-core:1.3-groovy-2.5"

}

tomcat {
    enableSSL = false
    httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
    ajpProtocol  = 'org.apache.coyote.ajp.AjpNio2Protocol'
}

task createNeoContainer(type: DockerCreateContainer) {
    targetImageId 'informaticsmatters/fragnet-test:3.5-xchem-v1-build-2'
    portBindings = ['7474:7474','7687:7687']
    envVars = ['NEO4J_dbms_memory_pagecache_size': '2g',
               'NEO4J_dbms_memory_heap_initial__size': '2g',
               'NEO4J_dbms_memory_heap_max__size': '2g',
               'NEO4J_AUTH': 'neo4j/test123',
               'NEO4J_USERNAME': 'neo4j',
               'NEO4J_PASSWORD': 'test123']
    autoRemove = true
}

task startNeoContainer(type: DockerStartContainer) {
    dependsOn createNeoContainer
    targetContainerId createNeoContainer.getContainerId()
}

task stopNeoContainer(type: DockerStopContainer) {
    targetContainerId createNeoContainer.getContainerId()
}

test {
    environment = [
            // TODO - fix the hard coded RDBASE setup.
            'NEO4J_PASSWORD':'test123',
            'NEO4J_SERVER':'localhost',
            'LD_LIBRARY_PATH':'/home/timbo/github/rdkit/rdkit_2020_03/Code/JavaWrappers/gmwrapper:/usr/x86_64-linux-gnu',
            'RDBASE':'/home/timbo/github/rdkit/rdkit_2020_03'
    ]
//    beforeTest { descriptor ->
//        logger.lifecycle("Running test: " + descriptor)
//    }
}

tasks.test.dependsOn("startNeoContainer")
tasks.test.finalizedBy("stopNeoContainer")

task copyKeycloakJars(type: Copy) {
    from "../lib/keycloak-2.1.0-jars-tomcat8"
    into "build/libs/keycloak-2.1.0-jars-tomcat8/"
    include "*.jar"
}

task buildDockerFile(type: Dockerfile) {

    dependsOn = [
            war,
            copyKeycloakJars
    ]

    destFile = project.file('build/Dockerfile')
    from "informaticsmatters/rdkit-tomcat-debian:Release_2019_09"
    label(['maintainer': 'Tim Dudgeon "tdudgeon@informaticsmatters.com"'])

    // include the keycloak adapters
    runCommand('''mkdir keycloak && cd keycloak && curl -s -o keycloak.tar.gz\
 https://downloads.jboss.org/keycloak/3.4.3.Final/adapters/keycloak-oidc/keycloak-tomcat8-adapter-dist-3.4.3.Final.tar.gz &&\
 tar xfz keycloak.tar.gz &&\
 rm keycloak.tar.gz &&\
 mv *.jar $CATALINA_HOME/lib &&\
 cd $CATALINA_HOME && rm -rf keycloak''')

    addFile('./libs/fragnet-search*.war', "/usr/local/tomcat/webapps/")
    // need to unpack the zip as we need to mess with the keycloak related jars
    runCommand("cd /usr/local/tomcat/webapps && " +
            "unzip -d fragnet-search fragnet-search*.war && " +
            "rm fragnet-*.war")

    // this bit handles the conflicting jars in lib and webapps/fragnet-search/WEB-INF/lib.
    // the old ones in lib are removed and the correct ones moved from the webapp lib dir to the tomcat lib dir.
    runCommand('''rm $CATALINA_HOME/lib/jackson* $CATALINA_HOME/lib/jboss-logging* &&\
mv $CATALINA_HOME/webapps/fragnet-search/WEB-INF/lib/jackson-core*.jar \
$CATALINA_HOME/webapps/fragnet-search/WEB-INF/lib/jackson-annotations*.jar \
$CATALINA_HOME/webapps/fragnet-search/WEB-INF/lib/jackson-databind*.jar \
$CATALINA_HOME/webapps/fragnet-search/WEB-INF/lib/jboss-logging*.jar \
$CATALINA_HOME/lib/''')

}

task buildDockerImage(type: DockerBuildImage, dependsOn: buildDockerFile) {
    inputDir = buildDockerFile.destFile.get().asFile.parentFile
    tags.add("squonk/fragnet-search:${dockerImageTag}")
}