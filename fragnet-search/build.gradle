/*
 * Copyright (c) 2023 Informatics Matters Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
    id 'war'
    id 'groovy'
    id 'com.bmuschko.tomcat'
    //id 'com.bmuschko.docker-remote-api' version '5.3.0' // needs gradle >= 5.1
    id 'com.bmuschko.docker-remote-api' version '8.1.0'
}

description = 'Fragment network search'

// To run the tests you must setup RDBASE to point to a valid RDKit build that includes
// The Java wrappers. To do this follow the "Building from Source" instructions found here:
// http://rdkit.org/docs/Install.html#building-from-source
// Just do a build - don't do a `make install` and then set the RDBASE environment variable
// to the top level directory for that checkout.
// You do not need to do this to build the code, just to test it. If RDBASE is not defined a locally provided
// org.RDKit.jar is user to allow compilation.
// If the RDBASE environment variable is not defined the tests that require RDKit functionality are ignored.

String RDBASE = System.getenv('RDBASE') ?: ''
String RDKitJarFile = RDBASE + '/Code/JavaWrappers/gmwrapper/org.RDKit.jar'
boolean RDKitJava = RDBASE && file(RDKitJarFile).exists()
println "jar $RDKitJarFile exists? $RDKitJava"


dependencies {

    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

    implementation "org.jboss.weld.servlet:weld-servlet-core:$weldVersion"

    implementation "org.apache.camel:camel-core:$camelVersion"
    implementation "org.apache.camel:camel-jackson:$camelVersion"
    implementation "org.apache.camel:camel-servlet:$camelVersion"
    implementation "org.apache.camel:camel-servletlistener:$camelVersion"
    implementation "org.apache.camel:camel-cdi:$camelVersion"
    implementation "org.apache.camel:camel-swagger:$camelVersion"
    implementation "org.apache.camel:camel-swagger-java:$camelVersion"

    implementation "io.prometheus:simpleclient_common:0.6.0"

    if (RDKitJava) {
        println "RDBASE defined as $RDBASE - using that location for RDKit"
        println "Using jar file " + RDKitJarFile
        implementation files(RDKitJarFile)
    } else {
        println "Using local org.RDKit.jar"
        implementation files("../lib/rdkit/org.RDKit.jar")
    }

    implementation 'org.neo4j.driver:neo4j-java-driver:4.4.5'

    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

    def tomcatVersion = '8.5.37'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"

}

tomcat {
    enableSSL = false
    httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
    ajpProtocol  = 'org.apache.coyote.ajp.AjpNio2Protocol'
}

task createNeoContainer(type: DockerCreateContainer) {
    targetImageId 'informaticsmatters/fragnet-test:3.5.25-xchem-combi-sample-2021-02'
    //portSpecs = ['7474:7474','7687:7687']
    envVars = ['NEO4J_dbms_memory_pagecache_size': '2g',
               'NEO4J_dbms_memory_heap_initial__size': '2g',
               'NEO4J_dbms_memory_heap_max__size': '2g',
               'NEO4J_AUTH': 'neo4j/test123',
               'NEO4J_USERNAME': 'neo4j',
               'NEO4J_PASSWORD': 'test123']
}

task startNeoContainer(type: DockerStartContainer) {
    dependsOn createNeoContainer
    targetContainerId createNeoContainer.getContainerId()
}

task stopNeoContainer(type: DockerStopContainer) {
    targetContainerId createNeoContainer.getContainerId()
}

test {
    environment = [
            'NEO4J_PASSWORD': 'test123',
            'NEO4J_SERVER': 'localhost',
            'LD_LIBRARY_PATH': RDBASE + '/build/Code/JavaWrappers/gmwrapper:/usr/x86_64-linux-gnu',
            'RDBASE': RDBASE
    ]
//    beforeTest { descriptor ->
//        logger.lifecycle("Running test: " + descriptor)
//    }
}

tasks.test.dependsOn("startNeoContainer")
tasks.test.finalizedBy("stopNeoContainer")

tasks.register('copyKeycloak', Copy) {
    from('../lib')
    into('./build')
    include('keycloak-oidc-tomcat-adapter-24.0.5.tar.gz')
    include('keycloak-policy-enforcer-24.0.5.jar')
}

task buildDockerFile(type: Dockerfile) {

    dependsOn = [
            war
    ]

    destFile = project.file('build/Dockerfile')
    from "informaticsmatters/rdkit-tomcat-debian:Release_2023_03_3"
    label(['maintainer': 'Tim Dudgeon "tdudgeon@informaticsmatters.com"'])

    // include the keycloak adapters
    runCommand('mkdir keycloak')
    // adding the tarball also extracts it
    addFile('./keycloak-oidc-tomcat-adapter-24.0.5.tar.gz', 'keycloak')
    runCommand('''cd keycloak &&\
 mv *.jar $CATALINA_HOME/lib &&\
 cd $CATALINA_HOME &&\
 rm -rf keycloak /tmp/keycloak.tar.gz''')

    addFile('./libs/fragnet-search*.war', "/usr/local/tomcat/webapps/")
    // need to unpack the zip as we need to mess with the keycloak related jars
    runCommand("cd /usr/local/tomcat/webapps && " +
            "unzip -d fragnet-search fragnet-search*.war && " +
            "rm fragnet-*.war && " +
            "sed -i 's/protocol=\"AJP\\/1.3\"/protocol=\"AJP\\/1.3\" secretRequired=\"false\"/' /usr/local/tomcat/conf/server.xml")

    // this bit handles the conflicting jars in lib and webapps/fragnet-search/WEB-INF/lib.
    // the old ones in lib are removed and the correct ones moved from the webapp lib dir to the tomcat lib dir.
    runCommand('''rm $CATALINA_HOME/lib/jackson* $CATALINA_HOME/lib/jboss-logging* &&\
mv $CATALINA_HOME/webapps/fragnet-search/WEB-INF/lib/jackson-core*.jar \
$CATALINA_HOME/webapps/fragnet-search/WEB-INF/lib/jackson-annotations*.jar \
$CATALINA_HOME/webapps/fragnet-search/WEB-INF/lib/jackson-databind*.jar \
$CATALINA_HOME/webapps/fragnet-search/WEB-INF/lib/jboss-logging*.jar \
$CATALINA_HOME/lib/''')

    // this adds a missing dependency. See https://github.com/ahus1/keycloak-dropwizard-integration/issues/354
    addFile('./keycloak-policy-enforcer-24.0.5.jar', "/usr/local/tomcat/lib/")

    instruction('CMD /usr/local/tomcat/bin/catalina.sh run')

}

task buildDockerImage(type: DockerBuildImage, dependsOn: buildDockerFile) {
    inputDir = buildDockerFile.destFile.get().asFile.parentFile
    images.add("squonk/fragnet-search:${dockerImageTag}")
}

tasks["buildDockerImage"].dependsOn("copyKeycloak")
